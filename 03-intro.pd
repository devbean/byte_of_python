# 简介

Python是能够声称同时具有*简单*和*强大*的少数语言之一。你将会惊喜地发现能够更简单地专注于问题的解决方案，而不是你正在使用的编程语言的语法以及结构。

Python的官方介绍是：

> Python是一个易于学习的功能强大的编程语言。它具有高效的高级数据结构以及能够简单有效地实现面向对象编程。Python优美的语法和动态类型，连同解释型特性一起，使其在多个平台的许多领域都成为脚本化以及快速应用开发的理想语言。

在下一章，我将更详细地讨论这些特性。

名字背后的故事

:   Python语言的发明人Guido van Rossum以BBC的喜剧《Monty Python's Flying Circus》来命名这个语言。他不是特别喜欢那些为了食物而杀死动物的蛇，这些蛇会用它们长长的身体缠绕住那些动物从而勒死它们。

## Python的特点

### 简单

Python是一门简单而简约的语言。阅读Python程序感觉就像阅读英语，尽管是非常严格的英语。Python的这种伪代码特性是其最强大的特点之一。它允许你关注于问题的解决而不是语言本身。

### 容易学习

正如你即将看到的那样，Python非常容易学习。就像刚刚提到的，Python具有非常简单的语法。

### 免费开源

Python是一个*FLOSS*（自由和开源软件）。在一些简单的条款之下，你可以自由地分发这个软件的拷贝，阅读其源代码，修改它，或者将其某一部分用到新的自由程序中。FLOSS基于共享知识的社区的概念。这是Python很好的原因之一——它是由那些希望Python发展得更好的社区创建和改进的。

### 高级语言

当你使用Python编写程序时，你永远不需要担心低级细节，比如你的程序的内存管理等。

### 可移植

由于其开放源代码的本质，Python已经被移植（也就是说使其能够工作）到许多平台。只要你足够小心，避免使用系统相关特性，你的所有Python程序都可以不加修改地运行在这其中任意平台。

你可以在Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acorn RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE，甚至PocketPC平台使用Python。

你甚至可以利用类似[Kivy](http://kivy.org/)平台创建iOS（iPhone、iPad）和Android游戏。

### 解释型

这需要一些解释。

使用编译型语言（比如C或者C++）编写的程序，会由编译器结合一系列标志位和参数，将源代码（也就是C或者C++）转换成一种电脑能够识别的语言（二进制代码，也就是0和1）。在运行程序时，链接器/加载器软件将程序从硬盘复制到内存，然后开始运行。

另一方面，Python并不需要编译成二进制代码。你仅仅需要直接从源代码*运行*程序。从底层来说，Python将源代码转换成一种称为字节码的中间格式，将其翻译成你的计算机的原生语言，然后开始运行。事实上，所有这些都让Python的使用更为简单，因为你不需要担心编译程序，不需要担心链接和加载恰当的库等等。这也使得你的Python程序更可移植，因为你只需要复制你的Python程序到另外一台计算机，然后它就可以工作了！

### 面向对象

Python同时支持面向过程和面向对象编程。在*面向过程*语言中，程序围绕着过程或者函数构建。所谓过程，就是一系列可复用的程序段。在*面向对象*语言中，程序围绕着对象构建。所谓对象，就是数据和功能的组合。Python具有非常强大但是简洁的OOP特性，特别是相对于C++或者Java这种大型语言来说。

### 可扩展

如果你需要一段必须运行得很快的代码，或者是想要编写一个不愿公开的算法，你可以使用C或C++完成这部分程序，然后将其嵌入到Python程序中。

### 可嵌入

你可以将Python嵌入到C/C++程序，让你的程序用户获得“脚本化”的能力。

### 可扩展的库

Python标准库的确很大。它能够帮助你完成许多工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、加密、GUI（图形用户界面）以及其它系统相关的代码。记住，只要安装了Python，所有这些都是可用的。这是Python“一站式”哲学。

除了标准库，还有大量其它高质量库，你可以在[Python包索引](http://pypi.python.org/pypi)找到它们。

总结

:   Python的确是一个激动人心的强大的语言。Python那种性能和特性的恰到好处的权衡让使用Python编程既有趣又简单。

## Python 2 versus 3

如果你不关心Python 2和Python 3的区别，尽可以跳过这一节。但是请务必留意你所使用的版本。

本书于2008年为Python 3重写。这是使用Python 3的最早的书籍之一。不幸的是，对于那些读着本书的Python 3版本，却在使用Python 2的读者而言，这就会令人困惑，反之亦然。但慢慢地，我们都会迁移到Python 3。

所以，在本书中你将要学习使用Python 3，即使你最终想用Python 2。*记住，一旦你有了清晰地认识，决定学习其中的一个，你可以简单地学习它们的区别然后迁移过去。困难的部分是学习和理解核心Python语言的编程。这是本书的目标，一旦你达到这一目标，你可以简单地依照情形使用Python 2或Python 3。*

关于Python 2和Python 3的区别，详见[Ubuntu wiki的Python/3页面](https://wiki.ubuntu.com/Python/3)。

## 程序员怎么说

或许你会对顶尖的黑客，比如ESR，怎么看待Python感兴趣：

(@) *Eric S. Raymond*，《The Cathedral and the Bazaar》的作者，也是创造了*开放源代码*这一术语的人。他说，[Python已经成为他最喜欢的编程语言](http://www.linuxjournal.com/article.php?sid=3882)。这篇文章是我第一次关注Python的真正灵感。

(@) *Bruce Eckel*，著名的《Thinking in Java》和《Thinking in C++》的作者。他说，没有语言比Python更能令他提高生产力。他说，Python或者是唯一地关注于让程序员工作更简单的一个语言。详见这篇[完整的采访](http://www.artima.com/intv/aboutme.html)。

(@) *Peter Norvig*，著名的Lisp的作者，Google搜索质量主管（感谢Guido van Rossum指出）。他说，Python一直是Google的基本部分。你可以通过查看[Google Jobs](http://www.google.com/jobs/index.html)页面验证这句话。这个页面上显示出，Python知识是招聘软件工程师的要求之一。
